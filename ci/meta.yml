meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.5
            tag: 0.0.5
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/terraform.tfvars
              cp terraform/deploy/terraform.tf ../terraform-config
              cp terraform/deploy/terraform.tfvars ../terraform-config
          dir: aws-concourse
        inputs:
          - name: aws-concourse
        outputs:
          - name: terraform-config
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan:  -lock-timeout=300s
        run:
          path: sh
          dir: aws-concourse/terraform/deploy
          args:
          - -exc
          - |
            cp ../../../terraform-config/terraform.tf .
            cp ../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            export TF_VAR_packer_egress_test_zip="{base_path = \"../../../packer-egress-test-release\", version = \"$(cat ../../../packer-egress-test-release/version)\"}"
            terraform plan -out terraform.plan
            terraform apply -auto-approve terraform.plan
        inputs:
        - name: aws-concourse
        - name: terraform-config
        - name: packer-egress-test-release
    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan:  -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((slack.webhook_url))
        run:
          path: sh
          dir: aws-concourse/terraform/deploy
          args:
          - -exc
          - |
            cp ../../../terraform-config/terraform.tf .
            cp ../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            export TF_VAR_packer_egress_test_zip="{base_path = \"../../../packer-egress-test-release\", version = \"$(cat ../../../packer-egress-test-release/version)\"}"
            terraform plan -detailed-exitcode
        inputs:
        - name: aws-concourse
        - name: terraform-config
        - name: packer-egress-test-release
    terraform-output:
      task: terraform-output
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        run:
          path: sh
          dir: aws-concourse/terraform/deploy
          args:
          - -exc
          - |
            cp ../../../terraform-config/terraform.tf .
            cp ../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform output -json > ../../../terraform-output/outputs.json
        inputs:
        - name: aws-concourse
        - name: terraform-config
        outputs:
        - name: terraform-output
    concourse-smoke-tests:
      task: concourse-smoke-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/alpine-jq-curl
            version: 0.0.4
            tag: 0.0.4
        run:
          path: sh
          args:
            - -exc
            - |
              CONCOURSE_URI=$(cat ../terraform-output/outputs.json | jq -r .loadbalancer.value.outputs.fqdn)
              curl -kIs https://${CONCOURSE_URI} | grep 'HTTP/2 200'
              curl -ks https://${CONCOURSE_URI} | grep 'Concourse'
          dir: concourse-smoke-tests
        inputs:
          - name: terraform-output
    generate-positive-proxy-test-manifest:
      task: generate-positive-proxy-test-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        outputs:
          - name: positive-proxy-test-manifest
        run:
          path: sh
          dir: positive-proxy-test-manifest
          args:
          - -exc
          - |
            cat << EOF > manifest.json
            {
                "required_endpoints": {
                  "GitHub":  "https://github.com",
                }
            }
            EOF
            cat manifest.json
    generate-negative-proxy-test-manifest:
      task: generate-negative-proxy-test-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        outputs:
          - name: negative-proxy-test-manifest
        run:
          path: sh
          dir: negative-proxy-test-manifest
          args:
          - -exc
          - |
            cat << EOF > manifest.json
            {
              "required_endpoints": {
                "MSN": "https://msn.com"
              }
            }
            EOF
            cat manifest.json
    run-positive-proxy-test:
      task: run-positive-proxy-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        inputs:
          - name: positive-proxy-test-manifest
          - name: .aws
        params:
          AWS_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
          AWS_CONFIG_FILE: .aws/config
        run:
          path: sh
          args:
          - -exc
          - |
            echo "Test that whitelisted URLs are accessible through proxy"
            aws lambda invoke --function-name packer_egress_test \
              --invocation-type RequestResponse \
              --payload file://positive-proxy-test-manifest/manifest.json \
              --cli-connect-timeout 600 \
              --cli-read-timeout 600 \
            output.json

            cat output.json | jq -eC 'if .errorMessage? then error(.errorMessage) else true end'
    run-negative-proxy-test:
      task: run-negative-proxy-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        inputs:
          - name: negative-proxy-test-manifest
          - name: .aws
        params:
          AWS_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
          AWS_CONFIG_FILE: .aws/config
        run:
          path: sh
          args:
          - -exc
          - |
            echo "Test that URLs not in the whitelist aren't accessible through proxy"
            aws lambda invoke --function-name packer_egress_test \
              --invocation-type RequestResponse \
              --payload file://negative-proxy-test-manifest/manifest.json \
              --cli-connect-timeout 600 \
              --cli-read-timeout 600 \
            output.json

            cat output.json | jq -eC 'if .errorMessage? then true else error("Connection to internet not blocked") end'
