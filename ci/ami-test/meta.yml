meta:
  plan:
    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: "hashicorp/terraform"
            tag: ((dataworks.terraform_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_gitlab_username))
          GIT_EMAIL: ((dataworks.concourse_gitlab_email))
          GITLAB_TOKEN: ((dataworks-secrets.concourse_gitlab_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x

              AMI_ID=$(cat untested-al2-concourse-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"

              git clone https://oauth2:${GITLAB_TOKEN}@gitlab.com/dwp/dataworks/aws/deployments/no-layer/ami-builder-configs
              cd ami-builder-configs/results

              echo "$AMI_ID $RESULT" > "$PIPELINE.test"

              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://oauth2:${GITLAB_TOKEN}@gitlab.com/dwp/dataworks/aws/deployments/no-layer/ami-builder-configs
        inputs:
          - name: meta
          - name: untested-al2-concourse-ami

    ami-id-compare:
      task: ami-id-compare
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              AMI_ID=$(cat untested-al2-concourse-ami/id)

              source /assume-role
              for CURRENT_AMI_ID in $(aws ec2 describe-instances --filters Name=tag:Name,Values=ci-concourse-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].ImageId');
              do
                if [[ $AMI_ID != $CURRENT_AMI_ID ]]; then
                  exit 1
                  echo "AMI ID's do not match, exiting..."
                else
                  echo "Running AMI ID matches the new resource"
                fi
              done
