name: "AMI build and test"
on:
  workflow_dispatch: {}
defaults:
  run:
    working-directory: terraform/deploy/

jobs:
  management-dev:
    name: "Terraform Apply Mangement-Dev"
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    env:
      TF_LOG: "ERROR"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ secrets.TERRAFORM_VERSION }}
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: "Install dependencies"
        id: deps
        run: pip install Jinja2 PyYAML boto3

      - name: "Bootstrap"
        id: bootstrap
        run: |
          python bootstrap_terraform.py > ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
          sed -i '/^assume_role/ d' terraform/deploy/terraform.tfvars
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          AWS_SECRETS_ROLE: ${{ secrets.AWS_GHA_ROLE_MGMT_DEV }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: "Terraform Init"
        id: init
        run: terraform init >> ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
        env:
          TF_WORKSPACE: default
          TF_VAR_assume_role: gha_aws_concourse
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: "Terraform Apply"
        id: apply
        run: |
          terraform plan -out terraform.plan >> ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
          terraform apply -auto-approve terraform.plan >> ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
        continue-on-error: false
        env:
          TF_WORKSPACE: default
          TF_INPUT: false
          TF_VAR_assume_role: gha_aws_concourse
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -detailed-exitcode >> ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
        continue-on-error: false
        env:
          TF_WORKSPACE: default
          TF_INPUT: false
          TF_VAR_assume_role: gha_aws_concourse
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: "Cycle nodes"
        if: success()
        id: cycle-nodes
        run: |
          set +x
          DURATION=${ASSUME_DURATION:=900}
          AWS_STS=$(aws sts assume-role --role-arn ${AWS_SECRETS_ROLE} --role-session-name awscli-$(date +%m%d%y%H%M%S) --duration-seconds ${DURATION})
          export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS | jq .Credentials.SecretAccessKey -r)
          export AWS_ACCESS_KEY_ID=$(echo $AWS_STS | jq .Credentials.AccessKeyId -r)
          export AWS_SESSION_TOKEN=$(echo $AWS_STS | jq .Credentials.SessionToken -r)
          set -x

          for INSTANCE_ID in $(aws ec2 describe-instances --filters Name=tag:Name,Values=ci-concourse-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId');
          do
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          done
        shell: bash
        env:
          AWS_SECRETS_ROLE: ${{ secrets.AWS_GHA_ROLE_MGMT_DEV }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: Deactivate AWS Credentials
        if: failure()
        uses: docker://amazon/aws-cli
        with:
          args: iam update-access-key --access-key-id ${{ secrets.ACTIONS_ACCESS_KEY_ID }} --status Inactive --user-name gha-aws-concourse
        env:
          AWS_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}

      - name: "Redact Logs AMI Test"
        if: failure()
        id: redact-logs-ami-test
        run: |
              sed -i "s/$ACC_MGMT_DEV/REDACTED/g" ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log
        shell: bash
        env:
          ACC_MGMT_DEV: ${{ secrets.AWS_GHA_ACC_MGMT_DEV }}

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: mgmt-dev-workflow-log
          path: ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}.log

      - uses: actions/checkout@v2
        if: success()
      - run: echo SUCCESS > ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}-success.txt

      - uses: actions/upload-artifact@v2
        if: success()
        with:
          name: deploy-success
          path: ${{ github.workspace }}/${{ github.run_id }}-${{ github.run_number }}-success.txt

      - name: Deactivate AWS Credentials
        if: ${{ always() }}
        uses: docker://amazon/aws-cli
        with:
          args: iam update-access-key --access-key-id ${{ secrets.ACTIONS_ACCESS_KEY_ID }} --status Inactive --user-name gha-aws-concourse
        env:
          AWS_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}

      - name: Prepare SemVer
        if: success()
        id: prepare-semver
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo $LATEST_VERSION
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo ::set-output name=latest_version_out::$LATEST_VERSION
          echo ::set-output name=semver_increment::"p"

      - name: Increment SemVer
        if: success()
        id: semver
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.prepare-semver.outputs.latest_version_out }}
          increment: ${{ steps.prepare-semver.outputs.semver_increment }}

      - name: Get publish version
        if: success()
        id: get-publish-version
        run: echo "::set-output name=publish-version::${{ steps.semver.outputs.semver }}"

      - name: Checkout code
        uses: actions/checkout@master
      - name: Create GitHub Release
        if: success()
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ steps.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false
